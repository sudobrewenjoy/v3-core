{
  "contractName": "Mecenas",
  "constructorInputs": [
    {
      "name": "recipient",
      "type": "bytes20"
    },
    {
      "name": "funder",
      "type": "bytes20"
    },
    {
      "name": "pledge",
      "type": "int"
    }
  ],
  "abi": [
    {
      "name": "receive",
      "inputs": [
        {
          "name": "pk",
          "type": "pubkey"
        },
        {
          "name": "s",
          "type": "sig"
        },
        {
          "name": "ver",
          "type": "bytes4"
        },
        {
          "name": "hPhSo",
          "type": "bytes100"
        },
        {
          "name": "scriptCode",
          "type": "bytes"
        },
        {
          "name": "value",
          "type": "bytes8"
        },
        {
          "name": "nSequence",
          "type": "bytes4"
        },
        {
          "name": "hashOutput",
          "type": "bytes32"
        },
        {
          "name": "tail",
          "type": "bytes8"
        }
      ]
    },
    {
      "name": "reclaim",
      "inputs": [
        {
          "name": "pk",
          "type": "pubkey"
        },
        {
          "name": "s",
          "type": "sig"
        }
      ]
    }
  ],
  "bytecode": "OP_3 OP_PICK OP_0 OP_NUMEQUAL OP_IF OP_6 OP_PICK OP_SIZE OP_NIP OP_4 OP_NUMEQUALVERIFY OP_7 OP_PICK OP_SIZE OP_NIP 64 OP_NUMEQUALVERIFY OP_9 OP_PICK OP_SIZE OP_NIP OP_8 OP_NUMEQUALVERIFY OP_10 OP_PICK OP_SIZE OP_NIP OP_4 OP_NUMEQUALVERIFY OP_11 OP_PICK OP_SIZE OP_NIP 20 OP_NUMEQUALVERIFY OP_12 OP_PICK OP_SIZE OP_NIP OP_8 OP_NUMEQUALVERIFY OP_6 OP_PICK OP_8 OP_ROLL OP_CAT OP_8 OP_PICK OP_CAT OP_9 OP_PICK OP_CAT OP_10 OP_ROLL OP_CAT OP_10 OP_PICK OP_CAT OP_11 OP_ROLL OP_CAT OP_6 OP_PICK OP_6 OP_PICK OP_CHECKSIGVERIFY OP_6 OP_ROLL OP_SIZE OP_1SUB OP_SPLIT OP_DROP OP_SWAP OP_SHA256 OP_6 OP_ROLL OP_CHECKDATASIGVERIFY e803 OP_7 OP_ROLL OP_BIN2NUM OP_4 OP_PICK OP_SUB OP_SWAP OP_SUB OP_8 OP_NUM2BIN OP_3 OP_ROLL OP_8 OP_NUM2BIN 76 87 a9 14 17 19 88 ac 008d27 OP_CHECKSEQUENCEVERIFY OP_DROP OP_13 OP_ROLL OP_BIN2NUM OP_2 OP_GREATERTHANOREQUAL OP_VERIFY OP_13 OP_ROLL OP_3 OP_SPLIT OP_NIP OP_10 OP_ROLL OP_5 OP_ROLL OP_CAT OP_6 OP_PICK OP_CAT OP_5 OP_PICK OP_CAT OP_SWAP OP_HASH160 OP_CAT OP_6 OP_ROLL OP_CAT OP_7 OP_ROLL OP_4 OP_ROLL OP_CAT OP_6 OP_ROLL OP_CAT OP_5 OP_ROLL OP_CAT OP_4 OP_ROLL OP_CAT OP_4 OP_ROLL OP_CAT OP_3 OP_ROLL OP_CAT OP_ROT OP_CAT OP_CAT OP_HASH256 OP_3 OP_ROLL OP_EQUAL OP_NIP OP_NIP OP_ELSE OP_3 OP_ROLL OP_1 OP_NUMEQUAL OP_IF OP_3 OP_PICK OP_HASH160 OP_ROT OP_EQUALVERIFY OP_2SWAP OP_CHECKSIG OP_NIP OP_NIP OP_ELSE OP_0 OP_ENDIF OP_ENDIF",
  "source": "contract Mecenas(bytes20 recipient, bytes20 funder, int pledge) {\n    function receive(\n        pubkey pk, sig s, bytes4 ver, bytes100 hPhSo, bytes scriptCode,\n        bytes8 value, bytes4 nSequence, bytes32 hashOutput, bytes8 tail\n    ) {\n        require(ver.length == 4);\n        require(hPhSo.length == 100);\n        require(value.length == 8);\n        require(nSequence.length == 4);\n        require(hashOutput.length == 32);\n        require(tail.length == 8);\n\n        bytes preimage = ver + hPhSo + scriptCode + value + nSequence + hashOutput + tail;\n        require(checkSig(s, pk));\n        require(checkDataSig(datasig(s), sha256(preimage), pk));\n\n        int fee = 1000;\n        bytes8 amount1 = bytes8(int(bytes(value)) - pledge - fee);\n        bytes8 amount2 = bytes8(pledge);\n\n        bytes1 opDup = 0x76;\n        bytes1 opEqual = 0x87;\n        bytes1 opHash160 = 0xa9;\n        bytes1 pushHash = 0x14;\n        bytes1 newVarInt1 = 0x17;\n        bytes1 newVarInt2 = 0x19;\n        bytes1 opEqualverify = 0x88;\n        bytes1 opChecksig = 0xac;\n\n        require(tx.age >= 30 days);\n        require(int(ver) >= 2);\n\n        bytes rawscr = scriptCode.split(3)[1];\n        bytes out1 = amount1 + newVarInt1 + opHash160 + pushHash + hash160(rawscr) + opEqual;\n        bytes out2 = amount2 + newVarInt2 + opDup + opHash160 + pushHash + recipient + opEqualverify + opChecksig;\n        require(hash256(out1 + out2) == hashOutput);\n    }\n\n    function reclaim(pubkey pk, sig s) {\n        require(hash160(pk) == funder);\n        require(checkSig(s, pk));\n    }\n}\n",
  "networks": {},
  "compiler": {
    "name": "cashc",
    "version": "0.2.1-beta"
  },
  "updatedAt": "2019-12-10T18:38:55.955Z"
}