contract Mecenas(bytes20 recipient, bytes20 funder, int pledge) {
    function receive(
        pubkey pk, sig s, bytes4 ver, bytes100 hPhSo, bytes scriptCode,
        bytes8 value, bytes4 nSequence, bytes32 hashOutput, bytes8 tail
    ) {
        require(ver.length == 4);
        require(hPhSo.length == 100);
        require(value.length == 8);
        require(nSequence.length == 4);
        require(hashOutput.length == 32);
        require(tail.length == 8);

        bytes preimage = ver + hPhSo + scriptCode + value + nSequence + hashOutput + tail;
        require(checkSig(s, pk));
        require(checkDataSig(datasig(s), sha256(preimage), pk));

        int fee = 1000;
        bytes8 amount1 = bytes8(int(bytes(value)) - pledge - fee);
        bytes8 amount2 = bytes8(pledge);

        bytes1 opDup = 0x76;
        bytes1 opEqual = 0x87;
        bytes1 opHash160 = 0xa9;
        bytes1 pushHash = 0x14;
        bytes1 newVarInt1 = 0x17;
        bytes1 newVarInt2 = 0x19;
        bytes1 opEqualverify = 0x88;
        bytes1 opChecksig = 0xac;

        require(tx.age >= 30 days);
        require(int(ver) >= 2);

        bytes rawscr = scriptCode.split(3)[1];
        bytes out1 = amount1 + newVarInt1 + opHash160 + pushHash + hash160(rawscr) + opEqual;
        bytes out2 = amount2 + newVarInt2 + opDup + opHash160 + pushHash + recipient + opEqualverify + opChecksig;
        require(hash256(out1 + out2) == hashOutput);
    }

    function reclaim(pubkey pk, sig s) {
        require(hash160(pk) == funder);
        require(checkSig(s, pk));
    }
}
