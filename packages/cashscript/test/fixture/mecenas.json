{
  "contractName": "Mecenas",
  "constructorInputs": [
    {
      "name": "recipient",
      "type": "bytes20"
    },
    {
      "name": "funder",
      "type": "bytes20"
    },
    {
      "name": "pledge",
      "type": "int"
    }
  ],
  "abi": [
    {
      "name": "receive",
      "covenant": true,
      "inputs": [
        {
          "name": "pk",
          "type": "pubkey"
        },
        {
          "name": "s",
          "type": "sig"
        }
      ]
    },
    {
      "name": "reclaim",
      "covenant": false,
      "inputs": [
        {
          "name": "pk",
          "type": "pubkey"
        },
        {
          "name": "s",
          "type": "sig"
        }
      ]
    }
  ],
  "bytecode": "OP_3 OP_PICK OP_0 OP_NUMEQUAL OP_IF OP_4 OP_PICK OP_4 OP_SPLIT 64 OP_SPLIT OP_NIP OP_SIZE 34 OP_SUB OP_SPLIT OP_8 OP_SPLIT OP_4 OP_SPLIT OP_NIP 20 OP_SPLIT OP_DROP OP_10 OP_ROLL OP_10 OP_ROLL OP_2DUP OP_SWAP OP_SIZE OP_1SUB OP_SPLIT OP_DROP OP_12 OP_ROLL OP_SHA256 OP_ROT OP_CHECKDATASIGVERIFY OP_CHECKSIGVERIFY e803 OP_ROT OP_BIN2NUM OP_7 OP_PICK OP_SUB OP_SWAP OP_SUB OP_8 OP_NUM2BIN OP_6 OP_ROLL OP_8 OP_NUM2BIN OP_3 OP_ROLL OP_3 OP_SPLIT OP_NIP 008d27 OP_CHECKSEQUENCEVERIFY OP_DROP OP_4 OP_ROLL OP_BIN2NUM OP_2 OP_GREATERTHANOREQUAL OP_VERIFY OP_ROT 17a914 OP_CAT OP_SWAP OP_HASH160 OP_CAT 87 OP_CAT OP_SWAP 1976a914 OP_CAT OP_3 OP_ROLL OP_CAT 88ac OP_CAT OP_CAT OP_HASH256 OP_EQUAL OP_NIP OP_NIP OP_ELSE OP_3 OP_ROLL OP_1 OP_NUMEQUAL OP_IF OP_3 OP_PICK OP_HASH160 OP_ROT OP_EQUALVERIFY OP_2SWAP OP_CHECKSIG OP_NIP OP_NIP OP_ELSE OP_0 OP_ENDIF OP_ENDIF",
  "source": "contract Mecenas(bytes20 recipient, bytes20 funder, int pledge) {\n    function receive(pubkey pk, sig s) {\n        require(checkSig(s, pk));\n\n        int fee = 1000;\n        bytes8 amount1 = bytes8(int(bytes(tx.value)) - pledge - fee);\n        bytes8 amount2 = bytes8(pledge);\n\n        bytes contractBytecode = tx.scriptCode.split(3)[1];\n\n        require(tx.age >= 30 days);\n        require(int(tx.version) >= 2);\n\n        // out1 = <amount1> + <23 bytes> + HASH160 <redeem script hash> EQUAL\n        // out2 = <amount2> + <25 bytes> + DUP HASH160 <public key hash> EQUALVERIFY CHECKSIG\n        bytes out1 = amount1 + 0x17a914 + hash160(contractBytecode) + 0x87;\n        bytes out2 = amount2 + 0x1976a914 + recipient + 0x88ac;\n\n        require(hash256(out1 + out2) == tx.hashOutputs);\n    }\n\n    function reclaim(pubkey pk, sig s) {\n        require(hash160(pk) == funder);\n        require(checkSig(s, pk));\n    }\n}\n",
  "networks": {},
  "compiler": {
    "name": "cashc",
    "version": "0.3.0-beta"
  },
  "updatedAt": "2019-12-06T11:40:17.272Z"
}