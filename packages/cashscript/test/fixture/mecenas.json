{
  "contractName": "Mecenas",
  "constructorInputs": [
    {
      "name": "recipient",
      "type": "bytes20"
    },
    {
      "name": "funder",
      "type": "bytes20"
    },
    {
      "name": "pledge",
      "type": "int"
    }
  ],
  "abi": [
    {
      "name": "receive",
      "covenant": true,
      "inputs": [
        {
          "name": "pk",
          "type": "pubkey"
        },
        {
          "name": "s",
          "type": "sig"
        }
      ]
    },
    {
      "name": "reclaim",
      "covenant": false,
      "inputs": [
        {
          "name": "pk",
          "type": "pubkey"
        },
        {
          "name": "s",
          "type": "sig"
        }
      ]
    }
  ],
  "bytecode": "OP_3 OP_PICK OP_0 OP_NUMEQUAL OP_IF OP_4 OP_PICK OP_4 OP_SPLIT 65 OP_SPLIT OP_NIP OP_SIZE 34 OP_SUB OP_SPLIT OP_8 OP_SPLIT OP_4 OP_SPLIT OP_NIP 20 OP_SPLIT OP_DROP OP_10 OP_ROLL OP_10 OP_ROLL OP_2DUP OP_SWAP OP_SIZE OP_1SUB OP_SPLIT OP_DROP OP_12 OP_ROLL OP_SHA256 OP_ROT OP_CHECKDATASIGVERIFY OP_CHECKSIGVERIFY OP_3 OP_ROLL OP_BIN2NUM OP_2 OP_GREATERTHANOREQUAL OP_VERIFY e803 OP_2 OP_PICK OP_BIN2NUM OP_7 OP_PICK OP_2 OP_PICK OP_ADD OP_LESSTHANOREQUAL OP_IF OP_2 OP_PICK 1976a914 OP_CAT OP_5 OP_PICK OP_CAT 88ac OP_CAT OP_DUP OP_HASH256 OP_3 OP_PICK OP_EQUALVERIFY OP_DROP OP_ELSE OP_6 OP_PICK OP_8 OP_NUM2BIN OP_3 OP_PICK OP_BIN2NUM OP_8 OP_PICK OP_SUB OP_2 OP_PICK OP_SUB OP_8 OP_NUM2BIN OP_OVER 1976a914 OP_CAT OP_7 OP_PICK OP_CAT 88ac OP_CAT OP_OVER 17a914 OP_CAT OP_7 OP_PICK OP_HASH160 OP_CAT 87 OP_CAT OP_2DUP OP_CAT OP_HASH256 OP_6 OP_PICK OP_EQUALVERIFY OP_2DROP OP_ENDIF OP_2DROP OP_2DROP OP_2DROP OP_2DROP OP_2DROP OP_1 OP_ELSE OP_3 OP_ROLL OP_1 OP_NUMEQUAL OP_IF OP_3 OP_PICK OP_HASH160 OP_ROT OP_EQUALVERIFY OP_2SWAP OP_CHECKSIG OP_NIP OP_NIP OP_ELSE OP_0 OP_ENDIF OP_ENDIF",
  "source": "contract Mecenas(bytes20 recipient, bytes20 funder, int pledge/*,  int period */) {\n    function receive(pubkey pk, sig s) {\n        require(checkSig(s, pk));\n\n        // Skip age check for simpler testing\n        // require(tx.age >= period);\n        require(int(tx.version) >= 2);\n\n        int fee = 1000;\n\n        if (int(bytes(tx.value)) <= pledge + fee) {\n            bytes out1 = new OutputP2PKH(tx.value, recipient);\n            require(hash256(out1) == tx.hashOutputs);\n        } else {\n            bytes8 amount1 = bytes8(pledge);\n            bytes8 amount2 = bytes8(int(bytes(tx.value)) - pledge - fee);\n\n            bytes out1 = new OutputP2PKH(amount1, recipient);\n            bytes out2 = new OutputP2SH(amount2, hash160(tx.bytecode));\n\n            require(hash256(out1 + out2) == tx.hashOutputs);\n        }\n    }\n\n    function reclaim(pubkey pk, sig s) {\n        require(hash160(pk) == funder);\n        require(checkSig(s, pk));\n    }\n}\n",
  "networks": {},
  "compiler": {
    "name": "cashc",
    "version": "0.3.0-beta"
  },
  "updatedAt": "2019-12-09T23:32:07.981Z"
}