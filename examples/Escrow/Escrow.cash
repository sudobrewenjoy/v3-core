pragma cashscript ^0.2.0;

contract Escrow(
  bytes20 sellerPHK, // Hash160 of seller's public key
  bytes20 buyerPKH, // Hash160 of buyer's public key
  bytes20 arbitratorPKH // Hash160 of arbitrator's public key
//   bytes escrowKey // Nonce (just some unimportant random bytes unique per exchange)
) {
  function spend(
    sig spenderSig,
    pubkey spenderPK,
    bytes oracleMsg,
    datasig oracleSig,
    pubkey oraclePK,
    bytes actionByte
  ) {
    bytes20 verifySpenderPKH = bytes20(0);
    bytes20 verifyOraclePKH = bytes20(0);

    if (actionByte == 0x01) {
      // "releaseBySeller"
      verifySpenderPKH = buyerPKH;
      verifyOraclePKH = sellerPHK;
    } else if (actionByte == 0x02) {
      // "releaseByArbitrator"
      verifySpenderPKH = buyerPKH;
      verifyOraclePKH = arbitratorPKH;
    } else if (actionByte == 0x03) {
      // "returnByBuyer"
      verifySpenderPKH = sellerPHK;
      verifyOraclePKH = buyerPKH;
    } else if (actionByte == 0x04) {
      // "returnByArbitrator"
      verifySpenderPKH = sellerPHK;
      verifyOraclePKH = arbitratorPKH;
    } else {
      // Action byte is unknown; fail.
      require(false);
    }

    require(hash160(oraclePK) == verifyOraclePKH);
    require(hash160(spenderPK) == verifySpenderPKH);

    // Construct message
    // bytes oracleMessage = escrowKey + actionByte;

    // Verify oracle's signature
    require(checkDataSig(oracleSig, oracleMsg, oraclePK));

    // Verify spender's tx signature
    require(checkSig(spenderSig, spenderPK));
  }
}
